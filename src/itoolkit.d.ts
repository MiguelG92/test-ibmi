/** Declaration file generated by dts-gen */

export class CommandCall {
    constructor(...args: any[]);

    toXML(...args: any[]): void;

}

export class Connection {
    constructor(...args: any[]);

    add(...args: any[]): void;

    debug(...args: any[]): void;

    getTransportOptions(...args: any[]): void;

    run(...args: any[]): void;

}

export class ProgramCall {
    constructor(...args: any[]);

    addParam(...args: any[]): void;

    addReturn(...args: any[]): void;

    toXML(...args: any[]): void;

}

export class iConn {
    constructor(...args: any[]);

    add(...args: any[]): void;

    debug(...args: any[]): void;

    getConnection(...args: any[]): void;

    run(...args: any[]): void;

}

export class iDataQueue {
    constructor(...args: any[]);

    clearDataQueue(...args: any[]): void;

    receiveFromDataQueue(...args: any[]): void;

    sendToDataQueue(...args: any[]): void;

}

export class iNetwork {
    constructor(...args: any[]);

    getNetInterfaceData(...args: any[]): void;

    getTCPIPAttr(...args: any[]): void;

}

export class iObj {
    constructor(...args: any[]);

    addToLibraryList(...args: any[]): void;

    retrCmdInfo(...args: any[]): void;

    retrPgmInfo(...args: any[]): void;

    retrSrvPgmInfo(...args: any[]): void;

    retrUserAuthToObj(...args: any[]): void;

    retrUserInfo(...args: any[]): void;

    retrUsrAuth(...args: any[]): void;

}

export class iPgm {
    constructor(...args: any[]);

    addParam(...args: any[]): void;

    addReturn(...args: any[]): void;

    toXML(...args: any[]): void;

}

export class iProd {
    constructor(...args: any[]);

    getInstalledProducts(...args: any[]): void;

    getPTFInfo(...args: any[]): void;

    getProductInfo(...args: any[]): void;

}

export class iSql {
    constructor(...args: any[]);

    addQuery(...args: any[]): void;

    columnPriv(...args: any[]): void;

    columns(...args: any[]): void;

    commit(...args: any[]): void;

    count(...args: any[]): void;

    describe(...args: any[]): void;

    execute(...args: any[]): void;

    fetch(...args: any[]): void;

    foreignKeys(...args: any[]): void;

    free(...args: any[]): void;

    pColumns(...args: any[]): void;

    prepare(...args: any[]): void;

    primaryKeys(...args: any[]): void;

    procedures(...args: any[]): void;

    rowCount(...args: any[]): void;

    special(...args: any[]): void;

    statistics(...args: any[]): void;

    tablePriv(...args: any[]): void;

    tables(...args: any[]): void;

    toXML(...args: any[]): void;

}

export class iUserSpace {
    constructor(...args: any[]);

    createUserSpace(...args: any[]): void;

    deleteUserSpace(...args: any[]): void;

    getUserSpaceData(...args: any[]): void;

    setUserSpaceData(...args: any[]): void;

}

export class iWork {
    constructor(...args: any[]);

    getDataArea(...args: any[]): void;

    getJobInfo(...args: any[]): void;

    getJobStatus(...args: any[]): void;

    getSysStatus(...args: any[]): void;

    getSysStatusExt(...args: any[]): void;

    getSysValue(...args: any[]): void;

}

export function iCmd(cmd: any, options: any): any;

export function iQsh(qsh: any, options: any): any;

export function iSh(sh: any, options: any): any;

export function xmlToJson(xml: any): any;

